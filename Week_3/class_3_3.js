// Authentication, JWTs and try/catch

// PART 1 - JWT

// JWTs are just like Bank cheques. They are isssued by the backend / bank when you sign in / open an account. These JWTs/ cheques are sent everytime you send a request to the backend / deposit money in the bank. The backend / bank verifies the JWT / cheque and then processes the request / transaction.
//  Anyone can create something very similar, but the backend would reject it.
// If you lose the original JWT / cheque, then there is a problem. So you need to keep it safe.

// There are 3 actions that can be done with JWTs:
// 1. Sign in or Generate  -----> Bank issuing a cheque
// 2. Decode  -----> Reading the cheque
// 3. Verify  -----> Bank verifying the cheque

// Decoding vs Verifying
// Decoding can be done by anyone, but verifying can only be done by the bank / backend.

// // npm install jsonwebtoken
// const jwt = require("jsonwebtoken");

// const value = {
//     name: "Aman",
//     accountNumber: 1234567890,
// }

// const token = jwt.sign( value, "secret");
// // console.log(token);

// // this token has been generated using this secret and hence can only be verified using this secret.


// // The following token has been generated by the intruder using the same contents but he doesn't know the secret.
// // const verifiedToken = jwt.verify("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW1hbiIsImFjY291bnROdW1iZXIiOjEyMzQ1Njc4OTAsImlhdCI6MTczNTE4MzU4MX0.9usA7mwu9L-XO9QF9-T2iUKcaOooukSG-VYz3VY7iaU", "secret");

// // Output - JsonWebTokenError: invalid signature

// // The following token has been generated by the backend server using the contents provided by the user and the secret known only to the server.

// const verifiedToken = jwt.verify("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW1hbiIsImFjY291bnROdW1iZXIiOjEyMzQ1Njc4OTAsImlhdCI6MTczNTE4MzIzNX0.LOqGpJRb2JnCAe76z9SsjwRgpcJDzor6siqSvZGYfCA", "secret");
// console.log(verifiedToken);

// // Output - { name: 'Aman', accountNumber: 1234567890, iat: 1735183235 }


// // PART 2 - TRY CATCH

// // When an exception is raised, the process exits (code stops executing) since the JS program doesn't want to proceed any more.

// // Try-Catch is used to handle exceptions. It is used to catch the exceptions and then proceed with the code.

//try-catch syntax
try{
    let a;
    console.log(a.length); // undefined.length will throw an error
    console.log("HI there from inside try");
} catch(e){
    console.log("inside catch");
}

console.log("Hello there");

// Output - inside catch
//          Hello there

// if an error is thrown in the try block, the catch block is executed and the code proceeds with the next line after the catch block. If no error is thrown, the catch block is not executed and the code proceeds with the next line after the try-catch block. 

// ADVANTAGE of try catch --> So, in any case, the code proceeds with the next line after the catch block.

// Assignment - Check week-3/02-jwt/index.js